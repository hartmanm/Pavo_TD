extends ../node_modules/pug-bootstrap/_bootstrap
append styles
  link(href="scripts/pug-bootstrap/css/carousel.css", rel="stylesheet")
  link(href="scripts/pug-bootstrap/css/navbar.css", rel="stylesheet")

block body
  .navbar-wrapper
    .container
      nav.navbar.navbar-inverse.navbar-static-top
        .container
          .navbar-header
            button(type="button" ,class="navbar-toggle collapsed", data-toggle="collapse", data-target="#navbar" ,aria-expanded="false", aria-controls="navbar")
              span.sr-only Toggle navigation
              span.icon-bar
              span.icon-bar
              span.icon-bar
              
            a(class="navbar-brand", href="#") Pavo TD
          #navbar.navbar-collapse.collapse
            ul.nav.navbar-nav
              li.active
                a(href="home") Home
              li
                a(href="https://github.com/hartmanm/Pavo_TD") About
              li.dropdown
                a.dropdown-toggle(href='#', data-toggle='dropdown', role='button', aria-expanded='false')
                  | User 
                  span.caret
                ul.dropdown-menu(role='menu')
                  li
                    a(href='login') Login/Logout
                  li
                    a(href='leaderboards') Leaderboards
                  li.divider
                  li.dropdown-header New Users
                  li
                    a(href='createUser') Create User
              li
                a #{welcome}

  +carousel("levelsCarousel", [
    {image: "images/leveloneBasic.jpg", p: "Level One", button: {caption: "Launch", url: "levelOne"}},
    {image: "images/leveltwoIntermediate.jpg", p: "Level Two", button: {caption: "Launch", url: "levelTwo"}},
    {image: "images/levelthreeAdvanced.jpg", p: "Level Three", button: {caption: "Launch", url: "levelThree"}}
    ])

  .container
    if (results.hasOwnProperty('maxLivesL1'))
      .col-md-4
        h2 Level 1 Highscore
        if results.maxLivesL1[0]
          p Max Lives:  #{results.maxLivesL1[0].livesRemaining}
          p Max Credits:  #{results.maxCreditsL1[0].creditsRemaining}
          p Max Turrets:  #{results.maxTurretsL1[0].towers.turrets}
          p Min Turrets:  #{results.minTurretsL1[0].towers.turrets}
          p Max Bombers:  #{results.maxBombersL1[0].towers.bombers}
          p Min Bombers:  #{results.minBombersL1[0].towers.bombers}
          p Max Icers:  #{results.maxIcersL1[0].towers.icers}
          p Min Icers:  #{results.minIcersL1[0].towers.icers}
        //-
          each completedLevel, i in completedLevels
            fieldset
              -var levelText = JSON.stringify(completedLevel, null, 2)
              p #{levelText}
      .col-md-4
        h2 Level 2 Highscore
        if results.maxLivesL2[0]
          p Max Lives:  #{results.maxLivesL2[0].livesRemaining}
          p Max Credits:  #{results.maxCreditsL2[0].creditsRemaining}
          p Max Turrets:  #{results.maxTurretsL2[0].towers.turrets}
          p Min Turrets:  #{results.minTurretsL2[0].towers.turrets}
          p Max Bombers:  #{results.maxBombersL2[0].towers.bombers}
          p Min Bombers:  #{results.minBombersL2[0].towers.bombers}
          p Max Icers:  #{results.maxIcersL2[0].towers.icers}
          p Min Icers:  #{results.minIcersL2[0].towers.icers}
        //-
          each completedLevel, i in completedLevels
            fieldset
              -var levelText = JSON.stringify(completedLevel, null, 2)
              p #{levelText}
      .col-md-4
        h2 Level 3 Highscore
        if results.maxLivesL3[0]
          p Max Lives:  #{results.maxLivesL3[0].livesRemaining}
          p Max Credits:  #{results.maxCreditsL3[0].creditsRemaining}
          p Max Turrets:  #{results.maxTurretsL3[0].towers.turrets}
          p Min Turrets:  #{results.minTurretsL3[0].towers.turrets}
          p Max Bombers:  #{results.maxBombersL3[0].towers.bombers}
          p Min Bombers:  #{results.minBombersL3[0].towers.bombers}
          p Max Icers:  #{results.maxIcersL3[0].towers.icers}
          p Min Icers:  #{results.minIcersL3[0].towers.icers}
        //-
          each completedLevel, i in completedLevels
            fieldset
              -var levelText = JSON.stringify(completedLevel, null, 2)
              p #{levelText}
    else
      .col-md-4
        h2 Level 1 Highscore
      .col-md-4
        h2 Level 2 Highscore
      .col-md-4
        h2 Level 3 Highscore

